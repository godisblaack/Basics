{
    "editor.stickyScroll.enabled": false,
    "files.autoSave": "afterDelay",
    "editor.wordWrap": "on",
    "editor.minimap.showSlider": "always",
    
    "notebook.editorOptionsCustomizations": {
        "editor.tabSize": 4,
        "editor.indentSize": 4,
        "editor.insertSpaces": true
    },

    // GitHub theme
    "workbench.colorTheme": "GitHub Dark High Contrast",
    // To remove the rectangle box highlight
    "workbench.colorCustomizations": {
        "[GitHub Dark High Contrast]": {
            "editor.lineHighlightBorder": "#00000000",// fully transparent
            "textCodeBlock.background": "#00000000"
        }
    },
    
    "workbench.editor.empty.hint": "hidden",
    
    // Code runner
    "code-runner.executorMap": {
        "javascript": "node",
        "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
        "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "zig": "zig run",
        // To run single cpp file and multiple files (including header files) which have white spaces in their filename, and it will create the executable in a folder name `build`.
        "cpp": "cd $dir && mkdir -p \"./build\" && if [ -f \"main.cpp\" ]; then g++ *.cpp -o \"./build/$fileNameWithoutExt\"; else g++ \"$fileName\" -o \"./build/$fileNameWithoutExt\"; fi && \"./build/$fileNameWithoutExt\"",
        "objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "php": "php",
        "python": "python",
        "perl": "perl",
        "perl6": "perl6",
        "ruby": "ruby",
        "go": "go run",
        "lua": "lua",
        "groovy": "groovy",
        "powershell": "powershell -ExecutionPolicy ByPass -File",
        "bat": "cmd /c",
        "shellscript": "bash",
        "fsharp": "fsi",
        "csharp": "scriptcs",
        "vbscript": "cscript //Nologo",
        "typescript": "ts-node",
        "coffeescript": "coffee",
        "scala": "scala",
        "swift": "swift",
        "julia": "julia",
        "crystal": "crystal",
        "ocaml": "ocaml",
        "r": "Rscript",
        "applescript": "osascript",
        "clojure": "lein exec",
        "haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
        "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
        "racket": "racket",
        "scheme": "csi -script",
        "ahk": "autohotkey",
        "autoit": "autoit3",
        "dart": "dart",
        "pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
        "d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
        "haskell": "runghc",
        "nim": "nim compile --verbosity:0 --hints:off --run",
        "lisp": "sbcl --script",
        "kit": "kitc --run",
        "v": "v run",
        "sass": "sass --style expanded",
        "scss": "scss --style expanded",
        "less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
        "FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "sml": "cd $dir && sml $fileName",
        "mojo": "mojo run",
        "erlang": "escript",
        "spwn": "spwn build",
        "pkl": "cd $dir && pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml",
        "gleam": "gleam run -m $fileNameWithoutExt"
    },
    "redhat.telemetry.enabled": false,
    "code-runner.clearPreviousOutput": true,
    "code-runner.runInTerminal": true,

    // MSYS2 MINGW64 terminal - This will now show a MSYS2 MINGW64 terminal in the list of terminal panel.
    "terminal.integrated.profiles.windows": {
        "MSYS2 MINGW64": {
            "path": "C:\\msys64\\usr\\bin\\bash.exe",
            "args": [
                "--login",
                "-i"
            ],
            "env": {
                "MSYSTEM": "MINGW64",
                "CHERE_INVOKING": "1"
            }
        }
    }
}